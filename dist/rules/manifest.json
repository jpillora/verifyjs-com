[
  {
    "namespace": "aus",
    "rules": [
      {
        "namespace": "aus",
        "params": [],
        "tests": {
          "valids": [],
          "invalids": []
        },
        "description": "<p>Australian Validation Rules</p>",
        "code": "(function($) {\n  $.verify.addFieldRules({"
      },
      {
        "namespace": "aus",
        "params": [],
        "tests": {
          "valids": [
            "2000"
          ],
          "invalids": [
            "90210"
          ]
        },
        "name": "postcode",
        "type": "field",
        "description": "<p>Ensures an australian postcode  </p>",
        "code": "postcode: {\n      regex: /^\\d{4}$/,\n      message: \"Invalid postcode\"\n    },"
      },
      {
        "namespace": "aus",
        "params": [],
        "tests": {
          "valids": [
            "(02) 9555-1234",
            "0411 123 456",
            "+61 1234 5678 9"
          ],
          "invalids": [
            "1234",
            "(20) 9555-1234",
            "xyz"
          ]
        },
        "name": "phone",
        "type": "field",
        "description": "<p>Ensures an australian phone number  </p>",
        "code": "phone: function(r) {\n      r.val(r.val().replace(/[^\\+\\d]/g,''));\n      var v = r.val();\n      if(!v.match(/^\\+?[\\d\\s]+$/))\n        return \"Use digits and spaces only\";\n      if(v.match(/^\\+\\d+$/))\n        return true; //allow all international\n      if(!v.match(/^0/))\n        return \"Number must start with 0\";\n      if(v.replace(/\\s/g,\"\").length !== 10)\n        return \"Must be 10 digits long\";\n      return true;\n    }"
      },
      {
        "namespace": "aus",
        "params": [],
        "tests": {
          "valids": [],
          "invalids": []
        },
        "description": "",
        "code": "});\n})(jQuery);"
      }
    ],
    "dependencies": [],
    "langs": []
  },
  {
    "namespace": "core",
    "rules": [
      {
        "namespace": "core",
        "params": [],
        "tests": {
          "valids": [],
          "invalids": []
        },
        "description": "<p>Core Validation Rules</p>",
        "code": "(function($) {\n  $.verify.addFieldRules({"
      },
      {
        "namespace": "core",
        "params": [],
        "tests": {
          "valids": [
            "dev@jpillora.com"
          ],
          "invalids": [
            "devjpillora.com",
            "dev@jpillora.c"
          ]
        },
        "name": "email",
        "type": "field",
        "description": "<p>Ensures a valid email address</p>",
        "code": "email: {\n      regex: /^(([^<>()\\[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n      message: \"Invalid email address\"\n    },"
      },
      {
        "namespace": "core",
        "params": [],
        "tests": {
          "valids": [
            "http://jpillora.com"
          ],
          "invalids": [
            "jpillora.com",
            "http://jpilloracom"
          ]
        },
        "name": "url",
        "type": "field",
        "description": "<p>Ensures a valid URL</p>",
        "code": "url: {\n      regex: /^https?:\\/\\/(\\S+(\\:\\S*)?@)?((?:[a-z\\u00a1-\\uffff0-9]+-?)*[a-z\\u00a1-\\uffff0-9]+)(\\.([a-z\\u00a1-\\uffff0-9]+-?)*[a-z\\u00a1-\\uffff0-9]+)*(\\.([a-z\\u00a1-\\uffff]{2,}))(:\\d{2,5})?(\\/[^\\s]*)?$/i,\n      message: \"Invalid URL\"\n    },"
      },
      {
        "namespace": "core",
        "params": [],
        "tests": {
          "valids": [
            "abc123ABC"
          ],
          "invalids": [
            "abc!123ABC"
          ]
        },
        "name": "alphanumeric",
        "type": "field",
        "description": "<p>Ensures only alphanumeric characters are used</p>",
        "code": "alphanumeric: {\n      regex: /^[0-9A-Za-z]+$/,\n      message: \"Use digits and letters only\"\n    },"
      },
      {
        "namespace": "core",
        "params": [],
        "tests": {
          "valids": [
            "123"
          ],
          "invalids": [
            "123abc"
          ]
        },
        "name": "number",
        "type": "field",
        "description": "<p>Ensures only numbers are used</p>",
        "code": "number: {\n      regex: /^\\d+$/,\n      message: \"Use digits only\"\n    },"
      },
      {
        "namespace": "core",
        "params": [],
        "tests": {
          "valids": [
            "abc"
          ],
          "invalids": [
            ""
          ]
        },
        "name": "required",
        "type": "field",
        "description": "<p>Ensures the field has filled in</p>",
        "code": "required: {\n\n      fn: function(r) {\n        return r.requiredField(r, r.field);\n      },\n\n      requiredField: function(r, field) {\n        var v = field.val();\n\n        switch (field.prop(\"type\")) {\n          case \"radio\":\n          case \"checkbox\":\n            var name = field.attr(\"name\");\n            var group = field.data('fieldGroup');\n\n            if(!group) {\n              group = r.form.find(\"input[name='\" + name + \"']\");\n              field.data('fieldGroup', group);\n            }\n\n            if (group.is(\":checked\"))\n              break;\n\n            if (group.size() === 1)\n              return r.messages.single;\n\n            return r.messages.multiple;\n\n          default:\n            if (! $.trim(v))\n              return r.messages.all;\n            break;\n        }\n        return true;\n      },\n      messages: {\n        all: \"This field is required\",\n        multiple: \"Please select an option\",\n        single: \"This checkbox is required\"\n      }\n    },"
      },
      {
        "namespace": "core",
        "params": [
          {
            "name": "regex",
            "type": "String",
            "description": "The regular expression"
          },
          {
            "name": "message",
            "type": "String",
            "description": "The error message displayed (default: 'Invalid Format')"
          }
        ],
        "tests": {
          "valids": [
            "#params(bcde) abcdef",
            "#params(^abc) abcdef"
          ],
          "invalids": [
            "#params($cde) abcdef"
          ]
        },
        "name": "regex",
        "type": "field",
        "description": "<p>Ensures the field matches the provided regular expression</p>",
        "code": "regex: {\n      fn: function(r) {\n        var re;\n        try {\n          var str = r.args[0];\n          re = new RegExp(str);\n        } catch(error) {\n          r.warn(\"Invalid regex: \" + str);\n          return true;\n        }\n\n        if(!re.test(r.val()))\n          return r.args[1] || r.message;\n        return true;\n      },\n      message: \"Invalid format\"\n    },"
      },
      {
        "namespace": "core",
        "params": [],
        "tests": {
          "valids": [],
          "invalids": []
        },
        "name": "pattern",
        "type": "field",
        "description": "<p>An alias to 'regex'</p>",
        "code": "pattern: {\n      extend: 'regex'\n    },"
      },
      {
        "namespace": "core",
        "params": [
          {
            "name": "min",
            "type": "Integer",
            "description": "An integer representing the minimum number of characters"
          }
        ],
        "tests": {
          "valids": [
            "#params(5) aaaaa",
            "#params(3) aaaaa"
          ],
          "invalids": [
            "#params(5) aaa"
          ]
        },
        "name": "min",
        "type": "field",
        "description": "<p>Ensures the number of characters is at least a given length  </p>",
        "code": "min: {\n      fn:function(r) {\n        var v = r.val();\n        r.min = parseInt(r.args[0], 10);\n        if(v.length < r.min)\n          return r.message;\n        return true;\n      },\n      message: \"Must be at least {{ min }} characters\"\n    },"
      },
      {
        "namespace": "core",
        "params": [
          {
            "name": "max",
            "type": "Integer",
            "description": "An integer representing the maximum number of characters"
          }
        ],
        "tests": {
          "valids": [
            "#params(5) aaaaa",
            "#params(3) aaa"
          ],
          "invalids": [
            "#params(3) aaaaa"
          ]
        },
        "name": "max",
        "type": "field",
        "description": "<p>Ensures the number of characters is at most a given length  </p>",
        "code": "max: {\n      fn: function(r) {\n        var v = r.val();\n        r.max = parseInt(r.args[0], 10);\n        if(v.length > r.max)\n          return r.message;\n        return true;\n      },\n      message: \"Must be at most {{ max }} characters\"\n    },"
      },
      {
        "namespace": "core",
        "params": [
          {
            "name": "min",
            "type": "String",
            "description": "An integer representing the minimum number of characters"
          },
          {
            "name": "max",
            "type": "String",
            "description": "An integer representing the maximum number of characters (default: min)"
          }
        ],
        "tests": {
          "valids": [
            "#params(5) aaaaa",
            "#params(3) aaa",
            "#params(3,5) aaaa"
          ],
          "invalids": [
            "#params(3,5) aaaaaaaa",
            "#params(3,5)"
          ]
        },
        "name": "size",
        "type": "field",
        "description": "<p>Ensures the number of characters is a inside a given length range</p>",
        "code": "size: {\n      fn: function(r){\n        var len = r.val().length;\n        r.min = parseInt(r.args[0], 10);\n        r.max = parseInt(r.args[1], 10) || r.min;\n\n        if(!r.min){\n          r.warn(\"Invalid argument: \"+r.args[0]);\n          return true;\n        }\n\n        if(len < r.min || len > r.max)\n          return r.messages[r.min === r.max ? 'exact' : 'range'];\n\n        return true;\n      },\n      messages: {\n        range: \"Must be between {{ min }} and {{ max }} characters\",\n        exact: \"Must be {{ min }} characters\"\n      }\n    }"
      },
      {
        "namespace": "core",
        "params": [],
        "tests": {
          "valids": [],
          "invalids": []
        },
        "description": "",
        "code": "});\n\n})(jQuery);"
      }
    ],
    "dependencies": [],
    "langs": [
      "src/rules/core/lang/en.js",
      "src/rules/core/lang/fr.js"
    ]
  },
  {
    "namespace": "date",
    "rules": [
      {
        "namespace": "date",
        "params": [],
        "tests": {
          "valids": [],
          "invalids": []
        },
        "description": "<p>Date Validation Rules</p>",
        "code": "(function($) {\n\n  $.verify.addFieldRules({"
      },
      {
        "namespace": "date",
        "params": [
          {
            "name": "format",
            "type": "String",
            "description": "The expected string format (defaults to 'YYYY-MM-DD')"
          }
        ],
        "tests": {
          "valids": [
            "2013-06-17",
            "#params(YYYY-MM-DD) 2013-06-17",
            "#params(YYYY/MM/DD) 2013/06/17",
            "#params(DD/MM/YYYY) 17/06/2013",
            "#params(DD MMMM YYYY) 17 June 2013"
          ],
          "invalids": [
            "17/06/2013",
            "17-06-2013",
            "17th of June 2013",
            "#params(DD MMMM YYYY) 17 Notamonth 2013",
            ""
          ]
        },
        "name": "date",
        "type": "field",
        "description": "<p>Ensures a valid date</p>",
        "code": "date: {\n      fn: function(r) {\n        if(!r.parse(r.field, r.args[0]))\n          return r.messages.format;\n        return true;\n      },\n      parse: function(field, format) {\n        if(format) this.format = format;\n        var m = moment(field.val(), format);\n        if(!m.isValid())\n          return null;\n        field.val(m.format(this.format));\n        return m;\n      },\n      format: 'YYYY-MM-DD',\n      messages: {\n        format: \"Must be in {{ format }} format\"\n      }\n    },"
      },
      {
        "namespace": "date",
        "params": [
          {
            "name": "age",
            "type": "Number",
            "description": "The minimum age"
          }
        ],
        "tests": {
          "valids": [
            "#params(18) 1980-06-17"
          ],
          "invalids": [
            "#params(18) 2013-06-17"
          ]
        },
        "name": "minAge",
        "type": "field",
        "description": "<p>Ensures a valid date and that this date is g to a mimum age</p>",
        "code": "minAge: {\n      extend: \"date\",\n      fn: function(r) {\n        r.age = parseInt(r.args[0],10);\n        if(!r.age) {\n          r.warn(\"Invalid Age Param: \" + r.args[0]);\n          return true;\n        }\n        var m = r.parse(r.field, r.args[1]);\n        if(!m)\n          return r.message;\n        var past = moment().subtract(r.age, 'years');\n        if(m.isAfter(past))\n          return r.messages.minAge;\n        return true;\n      },\n      messages: {\n        minAge: \"You must be at least {{ age }}\"\n      }\n    }"
      },
      {
        "namespace": "date",
        "params": [],
        "tests": {
          "valids": [],
          "invalids": []
        },
        "description": "",
        "code": "});\n\n  // Group validation rules\n  $.verify.addGroupRules({"
      },
      {
        "namespace": "date",
        "params": [
          {
            "name": "age",
            "type": "Number",
            "description": "The minimum age"
          }
        ],
        "tests": {
          "valids": [
            "#start(2013-06-17) #end(2014-06-17)"
          ],
          "invalids": []
        },
        "name": "dateRange",
        "type": "field",
        "description": "<p>Ensures a valid date range - e.g. start &lt; end</p>",
        "code": "dateRange: {\n      extend: \"date\",\n      fn: function(r) {\n        var start = r.field(\"start\"),\n            end = r.field(\"end\");\n\n        if(!start || !end) return true;\n\n        var startDate = r.parse(start, r.format);\n        if(!startDate)\n          return { start: r.messages.format };\n\n        var endDate = r.parse(end, r.format);\n        if(!endDate)\n          return { start: r.messages.format };\n\n        if(startDate.isAfter(endDate))\n          return r.messages.range;\n\n        return true;\n      },\n      messages: {\n        range: \"Start Date must come before End Date\"\n      }\n\n    }"
      },
      {
        "namespace": "date",
        "params": [],
        "tests": {
          "valids": [],
          "invalids": []
        },
        "description": "",
        "code": "});\n})(jQuery);"
      }
    ],
    "dependencies": [
      "moment-2.0.js"
    ],
    "langs": []
  },
  {
    "namespace": "misc",
    "rules": [
      {
        "namespace": "misc",
        "params": [],
        "tests": {
          "valids": [],
          "invalids": []
        },
        "description": "<p>Miscellaneous Validation Rules</p>",
        "code": "(function($) {\n  $.verify.addFieldRules({"
      },
      {
        "namespace": "misc",
        "params": [],
        "tests": {
          "valids": [],
          "invalids": []
        },
        "name": "agreement",
        "type": "field",
        "description": "<p>Ensures a checkbox or radio is checked</p>",
        "code": "agreement: {\n      fn: function(r){\n        if(!r.field.is(\":checked\"))\n          return r.message;\n        return true;\n      },\n      message:  \"You must agree to continue\"\n    },"
      },
      {
        "namespace": "misc",
        "params": [],
        "tests": {
          "valids": [
            "1",
            "1-5",
            "1a",
            "1a-5b"
          ],
          "invalids": [
            "a",
            "a-5b"
          ]
        },
        "name": "streetNumber",
        "type": "field",
        "description": "<p>Ensures a valid street number</p>",
        "code": "streetNumber: {\n      regex: /^\\d+[A-Za-z]?(-\\d+[A-Za-z]?)?$/,\n      message: \"Street Number only\"\n    }"
      },
      {
        "namespace": "misc",
        "params": [],
        "tests": {
          "valids": [],
          "invalids": []
        },
        "description": "",
        "code": "});\n})(jQuery);"
      }
    ],
    "dependencies": [],
    "langs": []
  },
  {
    "namespace": "numeric",
    "rules": [
      {
        "namespace": "numeric",
        "params": [],
        "tests": {
          "valids": [],
          "invalids": []
        },
        "description": "<p>Numeric Validation Rules</p>",
        "code": "(function($) {\n  $.verify.addFieldRules({"
      },
      {
        "namespace": "numeric",
        "params": [
          {
            "name": "The",
            "type": "symbol",
            "description": "currency symbol to expect"
          }
        ],
        "tests": {
          "valids": [
            "$100.00",
            "-$100.00",
            "#params(X) -X100.00"
          ],
          "invalids": [
            "100.00",
            "-X100.00"
          ]
        },
        "name": "currency",
        "type": "field",
        "description": "<p>Ensures valid currency</p>",
        "code": "currency: {\n      fn: function(r) {\n        if(r.args[0]) r.symbol = r.args[0];\n        if(!/^\\-?(.)\\d+(,?\\d{3})*(\\.\\d+)?$/.test(r.val()))\n          return r.message.invalidValue;\n        if(!RegExp.$1 || RegExp.$1 !== r.symbol)\n          return r.message.invalidCurrency;\n\n        return true;\n      },\n      symbol: '$',\n      message: {\n        invalidValue: \"Invalid monetary value\",\n        invalidCurrency: \"Missing '{{ symbol }}' symbol\"\n      }\n    },"
      },
      {
        "namespace": "numeric",
        "params": [
          {
            "name": "The",
            "type": "places",
            "description": "numbers of places to round"
          }
        ],
        "tests": {
          "valids": [
            "1.00",
            "100.00",
            "333"
          ],
          "invalids": [
            "33.33.00",
            "-$100"
          ]
        },
        "name": "decimal",
        "type": "field",
        "description": "<p>Ensures valid decimal number and rounds it</p>",
        "code": "decimal: {\n      fn: function(r) {\n        var vStr = r.val(),\n            places = r.args[0] ? parseInt(r.args[0], 10) : 2;\n\n        if(!vStr.match(/^\\-?\\d+(,\\d{3})*(\\.\\d+)?$/))\n          return r.message;\n\n        var v = parseFloat(vStr.replace(/,/g,'')),\n            factor = Math.pow(10,places);\n\n        v = (Math.round(v*factor)/factor);\n        r.field.val(v);\n\n        return true;\n      },\n      message: \"Invalid decimal value\"\n    },"
      },
      {
        "namespace": "numeric",
        "params": [
          {
            "name": "The",
            "type": "min",
            "description": "minimum value"
          }
        ],
        "tests": {
          "valids": [
            "xxxx",
            "#params(2.5) 3 "
          ],
          "invalids": [
            "#params(2.5) 2"
          ]
        },
        "name": "minVal",
        "type": "field",
        "description": "<p>Ensures the input is greater than the given value</p>",
        "code": "minVal: {\n      fn:function(r) {\n        var v = parseFloat(r.val().replace(/[^\\d\\.]/g,''));\n        r.min = parseFloat(r.args[0]);\n        if(!r.min) {\n          r.warn('minVal: No minimum set');\n          return true;\n        }\n        r.preffix = r.args[1] || '';\n        r.suffix =  r.args[2] || '';\n        if(v < r.min)\n          return r.message;\n        r.val(v);\n        return true;\n      },\n      prefix: '',\n      suffix: '',\n      message: \"Must be greater than { prefix }{ min }{ suffix }\"\n    },"
      },
      {
        "namespace": "numeric",
        "params": [
          {
            "name": "The",
            "type": "max",
            "description": "maximum value"
          }
        ],
        "tests": {
          "valids": [
            "xxxx",
            "#params(2.5) 2 "
          ],
          "invalids": [
            "#params(2.5) 3"
          ]
        },
        "name": "maxVal",
        "type": "field",
        "description": "<p>Ensures the input is less than the given value</p>",
        "code": "maxVal: {\n      fn:function(r) {\n        var v = parseFloat(r.val().replace(/[^\\d\\.]/g,''));\n        r.max = parseFloat(r.args[0]);\n        if(!r.max) {\n          r.warn('maxVal: No maximum set');\n          return true;\n        }\n        r.preffix = r.args[1] || '';\n        r.suffix =  r.args[2] || '';\n        if(v > r.max)\n          return r.message;\n        r.val(v);\n        return true;\n      },\n      prefix: '',\n      suffix: '',\n      message: \"Must be less than { prefix }{ max }{ suffix }\"\n    },"
      },
      {
        "namespace": "numeric",
        "params": [
          {
            "name": "The",
            "type": "min",
            "description": "minimum value"
          },
          {
            "name": "The",
            "type": "max",
            "description": "maximum value"
          }
        ],
        "tests": {
          "valids": [
            "missingparams",
            "#params(2.5) missingparam",
            "#params(2.5,6.5) 3",
            "#params(2.5,6.5) 6.45"
          ],
          "invalids": [
            "#params(2.5,6.5) 1.45",
            "#params(2.5,6.5) 7.45"
          ]
        },
        "name": "rangeVal",
        "type": "field",
        "description": "<p>Ensures the input is within the given range</p>",
        "code": "rangeVal: {\n      fn: function(r) {\n        var v = parseFloat(r.val().replace(/[^\\d\\.]/g,''));\n\n        r.min = parseFloat(r.args[0]);\n        if(!r.min) {\n          r.warn('rangeVal: No minimum set');\n          return true;\n        }\n        r.max = parseFloat(r.args[1]);\n        if(!r.max) {\n          r.warn('rangeVal: No maximum set');\n          return true;\n        }\n        r.preffix = r.args[2] || '';\n        r.suffix =  r.args[3] || '';\n        if(v > r.max || v < r.min)\n          return r.message;\n        return true;\n      },\n      prefix: '',\n      suffix: '',\n      message: \"Must be between { prefix }{ min }{ suffix }\\nand { prefix }{ max }{ suffix }\"\n    }"
      },
      {
        "namespace": "numeric",
        "params": [],
        "tests": {
          "valids": [],
          "invalids": []
        },
        "description": "",
        "code": "});\n})(jQuery);"
      }
    ],
    "dependencies": [],
    "langs": []
  }
]