.row-fluid(data-nav-heading='Custom Validation')
  .demo(data-nav-anchor='Custom Rules')
    p
      | If the validation rule you're looking for isn't in the list above, it's easy to create your own custom rule.
    p
      | For example, if for some strange reason, we wanted to check if a field is divible by 3, we can add a new rule
      code divisibleByThree
      | .
    pre(data-script='data-script').
      
    | Now, we can use it
    pre(data-html='data-html').
      
    script(data-script='data-script', type='text/javascript')
      $.verify.addRules({
        divisibleByThree: function(r) {
          var n = parseInt(r.val());
          if(n%3 !== 0)
            return "Not divisible by 3!"
          return true;
        }
      });
    | And Voila:
    div(data-html='data-html')
      form
        input(name='num', value='5', data-validate='divisibleByThree')
        input.submit(type='submit')
    .alert
      strong Note 
      | See the
      a(data-link) Rule Object
      | Spec for more information.




  .demo(data-nav-anchor='Asynchronous Rules')
    p
      | They key to asynchronous rules is just to use the 
      a(data-link) Rule Object
      | 's 
      code callback
      |  method. So instead of 
      code return "Failed"
      |  and 
      code return true
      |  , we'll now use 
      code r.callback("Failed")
      |  and 
      code r.callback(true)
      | . By not 
      code return
      | ing (which will actually returns 
      code undefined
      | ), you're telling the library to wait for a callback. 
      | If no callback is fired, a timeout warning will be 
      | displayed in the console.

    p The above is exemplied here:
    pre(data-script='data-script')
    
    script(data-script='data-script', type='text/javascript')
      $.verify.addRules({
        myAjax: function(r) {
          //Give the user some feedback (with notify.js)
          r.field.notify("Loading...", "black");
          //Simulate delay
          setTimeout(function() {
            var result;
            if(Math.random() > 0.5)
              result = true;
            else
              result = "My Ajax Failed";
            r.callback(result);
          }, 2000);
        }
      });

    p Now, we can use it
    pre(data-html='data-html').
      
    div(data-html='data-html')
      form
        input(name='num', value='42', data-validate='myAjax')
        input.submit(type='submit')
    .alert.alert-info
      strong Note 
      | Asynchronous rules execute in the same sequence as synchronous rules. See
      a(data-link) Execution Sequence
      | for more information.
//Custom 