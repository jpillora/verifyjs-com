// Generated by CoffeeScript 1.6.2
var routes;

routes = {
  "default": '/cron-jobs',
  events: {
    'cron.edit': '/cron-jobs/edit/:id',
    'cron.add': '/cron-jobs/add',
    'cron.exec': '/cron-jobs/:jobId/:execId',
    'cron.job': '/cron-jobs/:id',
    'cron.jobs': '/cron-jobs',
    'subs.edit': '/subscribers/edit/:email',
    'subs.add': '/subscribers/add',
    'subs': '/subscribers'
  }
};

CronEngine.config(function($routeProvider) {
  console.log("Config!");
  if (routes["default"]) {
    $routeProvider.otherwise({
      redirectTo: routes["default"]
    });
  }
  return _.each(routes.events, function(path, event) {
    return $routeProvider.when(path, {
      action: {
        path: path,
        event: event
      }
    });
  });
});

CronEngine.run(function($rootScope, $timeout) {
  var connections, resize;

  console.log("Run!");
  $rootScope.$on("$routeChangeSuccess", function(event, route) {
    return $timeout(function() {
      var action, m;

      action = route.action;
      if (!action) {
        return;
      }
      m = action.path.match(/^\/([\w-]+)/);
      if (m) {
        $rootScope.$broadcast('section', m[1]);
      }
      return $rootScope.$broadcast(action.event, route.params);
    });
  });
  $("form").asyncValidator({
    skipNotRequired: true,
    hideErrorOnChange: true,
    errorContainer: function(e) {
      return e.closest(".control-group");
    },
    prompt: function(e, text) {
      return e.siblings(".help-inline").html(text || "");
    }
  });
  $.asyncValidator.addFieldRules({
    url: {
      regex: /^https?:\/\/[\-A-Za-z0-9+&@#\/%?=~_|!:,.;]*[\-A-Za-z0-9+&@#\/%=~_|]/,
      message: "Invalid URL"
    },
    header: {
      regex: /^.+:.+$/,
      message: "Invalid Header"
    },
    tag: {
      regex: /^\w+\-*\w+$/,
      message: "Invalid Tag"
    }
  });
  resize = function() {
    var height, section;

    section = $("section:first");
    if (!section.length) {
      return;
    }
    height = window.innerHeight - section.position().top - 10;
    return section.css("height", height);
  };
  $(window).resize(resize);
  setTimeout(resize, 1000);
  connections = 0;
  return $(document).ajaxSend(function(e) {
    connections++;
    return $("body").toggleClass("no-loading", false).toggleClass("loading", true);
  }).ajaxComplete(function(e) {
    connections--;
    if (!connections) {
      return $("body").toggleClass("no-loading", true).toggleClass("loading", false);
    }
  });
});
